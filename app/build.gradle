//应用插件
plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'com.blend.gradle'   //自定义插件
}

blend {
    rootPath getRootDir().absolutePath
}

//配置Android插件所需参数
android {
    compileSdkVersion rootProject.ext.compileSdkVersionExt
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.blend.gradle"
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        rootProject.ext.debugBuild = true


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    //配置签名设置
    signingConfigs {
        release {
            keyAlias 'imooc'    //签名证书中秘钥的别名
            keyPassword '123456'     //签名证书中秘钥的密码
            storeFile file('./test.key')    //签名证书文件
            storePassword '123456'  //签名证书的密码
        }
    }

    //构建不同类型的APK
    buildTypes {

        debug {
            buildConfigField("String", "BUILD_TIME",
                    "\"${System.currentTimeMillis()}\"")

            resValue("string", "greeting", "hello!")

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'),
                    'proguard-rules.pro'
        }

        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    flavorDimensions "channel"

    productFlavors {
        baidu {
            manifestPlaceholders = [MTA_CHANNEL_VALUE: "baidu"]
        }
        wandoujia {
            manifestPlaceholders = [MTA_CHANNEL_VALUE: "wandoujia"]
        }
        xiaomi {
            manifestPlaceholders = [MTA_CHANNEL_VALUE: "xiaomi"]
        }
    }

    //APK重命名
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (variant.buildType.name.equals('debug')) {
                def fileName =
                        "Demo_${variant.productFlavors[0].name}" +
                                "_${defaultConfig.versionName}.apk"
                output.outputFileName = fileName
            }
        }

    }
}

//为应用程序添加第三方库
dependencies { DependencyHandler dependencyHandler ->

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation rootProject.ext.dependence.libAppcompat
    implementation rootProject.ext.dependence.libMaterial
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation project(path: ':annotation')

}


//----------------------在generate.*BuildConfig之前插入propagateBuildConfig任务------------------------------------
//只能在module下面使用，比如APP下面
task propagateBuildConfig {
    project.android.buildTypes.all { type ->
        println "<---> type: " + type.name
        println "<---> rootProject: " + rootProject.name
        println "<---> rootProject.ext.has " + rootProject.ext.has("debugBuild")
        println "<---> rootProject.ext.blendxx " + rootProject.ext.has("blendxx")

        // debuggable 是否可以进行本地调试
        type.debuggable = rootProject.ext.has("debugBuild") ? rootProject.ext.debugBuild : false
        println "<---> type.debuggable: " + type.debuggable
    }
}

project.afterEvaluate {
    tasks.all { task ->
        if (task.name =~ /generate.*BuildConfig/) {
            task.dependsOn(propagateBuildConfig)
        }
    }
}